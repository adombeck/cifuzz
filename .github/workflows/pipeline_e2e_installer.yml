# This Pipeline executes some kind of e2e test by running instructions from the docs
# As it uses the installer created by the release pipeline it only runs after the
# release pipeline finished
name: E2E Installer Installation/Example Test

on:
  workflow_run:
    workflows: ["Release Pipeline"]
    types:
      - completed
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-installer:
    name: ${{ matrix.os }} - test installer
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-11, ubuntu-22.04, windows-2022]
    steps:
      - name: Install dependencies (linux)
        if: contains(matrix.os, 'ubuntu')
        # please make sure this is in sync with the README.md / installation docs
        run: |
          sudo apt update
          sudo apt --yes install cmake clang llvm lcov default-jdk maven
          curl --fail --location https://services.gradle.org/distributions/gradle-7.5.1-bin.zip --output /tmp/gradle-7.5.1-bin.zip
          unzip -d /opt/gradle /tmp/gradle-7.5.1-bin.zip
          echo "/opt/gradle/gradle-7.5.1/bin" >> $GITHUB_PATH

      - name: Install dependencies (windows)
        if: contains(matrix.os, 'windows')
        # please make sure this is in sync with the README.md / installation docs
        run: choco install lcov microsoft-openjdk maven gradle

      # Action for configuring Developer Command Prompt for Microsoft Visual C++
      # Pinned to the commit of the v1.10.0 tag on 2022-05-05.
      - name: ClangCL - Windows
        uses: ilammy/msvc-dev-cmd@7315a94840631165970262a99c72cfb48a65d25d
        if: contains(matrix.os, 'windows')

      - name: Install dependencies (macos)
        if: contains(matrix.os, 'macos')
        # please make sure this is in sync with the README.md / installation docs
        run: |
          brew install llvm@12
          LLVM_PATH=$(brew --prefix llvm@12)
          echo "CC=$LLVM_PATH/bin/clang" >> $GITHUB_ENV
          echo "CXX=$LLVM_PATH/bin/clang++" >> $GITHUB_ENV
          echo "PATH=$PATH:$LLVM_PATH/bin" >> $GITHUB_ENV
          # use below opts to fix compilation issues on macOS, e.g. that "assert.h" is missing, etc.
          # at some point we would like to remove these lines but we haven't found a way to fix this otherwise
          echo "common --repo_env=BAZEL_CXXOPTS=-isysroot/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk" >> ~/.bazelrc
          echo "common --repo_env=BAZEL_LINKOPTS=--sysroot=/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk" >> ~/.bazelrc

      # "$HOME/cifuzz/bin" can be removed as soon as new install path is released
      - name: Update Path - MacOS/Linux
        if: contains(matrix.os, 'macos') || contains(matrix.os, 'ubuntu')
        run: |
          echo "$HOME/cifuzz/bin" >> $GITHUB_PATH
          echo "$HOME/.local/bin" >> $GITHUB_PATH
        shell: bash

      # "$HOME/cifuzz/bin" can be removed as soon as new install path is released
      - name: Update Path - Windows
        if: contains(matrix.os, 'windows')
        run: |
          echo "$HOME/cifuzz/bin" >> $GITHUB_PATH
          echo "$HOME/AppData/Roaming/cifuzz/bin" >> $GITHUB_PATH
        shell: bash

      - name: Download & execute latest installer
        run: sh -c "$(curl -fsSL https://raw.githubusercontent.com/CodeIntelligenceTesting/cifuzz/main/install.sh)"
        # to make sure our install script is compatible to all the shells
        shell: sh

      - name: Test cifuzz
        run: cifuzz --version | grep -E "^cifuzz version [0-9]+.[0-9]+.[0-9]+$"
        shell: bash

      - name: Download Example Projects
        # workaround to just download a single directory from github
        run: svn export https://github.com/CodeIntelligenceTesting/cifuzz.git/trunk/examples
        shell: bash

      - uses: actions/checkout@v3

      - name: Run cifuzz examples
        uses: ./.github/actions/run_cifuzz
        with:
          os: ${{ matrix.os }}
