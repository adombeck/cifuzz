# This Pipeline executes some kind of e2e test by running instructions from the docs
# To not unnecessarily lengthen the runtime of the PR pipelines we just run these
# tests after pushing to main.
#
# To test changes to this pipeline on a branch that's not main, trigger
# the workflow manually by selecting the workflow in the left sidebar
# in the "Actions" tab and clicking "Run workflow" on the right, then
# select the branch you want to test.

name: E2E Source Installation/Example Test

on:
  push:
    branches: [main]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # we are running the linux part in container as it is a more realistic starting
  # point than the preinstalled github VMs
  from_source_linux:
    name: ${{ matrix.container}} - install from source
    runs-on: ubuntu-22.04
    container:
      image: ${{ matrix.container}}
      options: --privileged
    strategy:
      matrix:
        container: ["ubuntu:22.04"]
    steps:
      - name: Set up Docker's Apt repository
        if: contains(matrix.container, 'ubuntu')
        # https://docs.docker.com/engine/install/ubuntu/
        run: |
          apt update
          apt --yes install ca-certificates curl gnupg
          install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          chmod a+r /etc/apt/keyrings/docker.gpg

          # Add the repository to Apt sources:
          echo \
            "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
            "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
            tee /etc/apt/sources.list.d/docker.list > /dev/null
          apt update

      - name: Install dependencies with apt
        if: contains(matrix.container, 'ubuntu')
        # please make sure this is in sync with the README.md / installation docs
        run: |
          apt update
          apt --yes install git make cmake clang llvm lcov libcap-dev default-jdk maven curl unzip
          apt --yes install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

      - name: Setup Go environment
        uses: actions/setup-go@v3
        with:
          go-version: "1.21"

      - name: Install gradle
        if: contains(matrix.container, 'ubuntu')
        run: |
          curl --fail --location https://services.gradle.org/distributions/gradle-7.5.1-bin.zip --output /tmp/gradle-7.5.1-bin.zip
          unzip -d /opt/gradle /tmp/gradle-7.5.1-bin.zip
          echo "/opt/gradle/gradle-7.5.1/bin" >> $GITHUB_PATH

      - name: Install bazel
        run: |
          curl -L https://github.com/bazelbuild/bazelisk/releases/download/v1.15.0/bazelisk-linux-amd64 -o /usr/bin/bazel
          chmod +x /usr/bin/bazel

      - uses: actions/checkout@v3

      - name: Install cifuzz
        run: make install

      - name: Run cifuzz examples
        uses: ./.github/actions/run_cifuzz
        with:
          os: ${{ matrix.container }}

  # In general it would be nice to use windows container for testing this,
  # but by now they are not available for windows based github runner
  from_source_mac-windows:
    name: ${{ matrix.os }} - install from source
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-12, windows-2022]
    steps:
      - uses: actions/checkout@v3

      - name: Setup VM for cifuzz
        uses: ./.github/actions/vm_setup
        with:
          os: ${{ matrix.os }}

      - name: Install cifuzz
        run: make install

      - name: Run cifuzz examples
        uses: ./.github/actions/run_cifuzz
        with:
          os: ${{ matrix.os }}
